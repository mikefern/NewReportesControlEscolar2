<?xml version="1.0" encoding="utf-8"?>
<Report ScriptLanguage="CSharp" ReportInfo.Created="09/07/2018 17:50:55" ReportInfo.Modified="06/02/2022 17:35:55" ReportInfo.CreatorVersion="2015.2.16.0">
  <ScriptText>using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows.Forms;
using System.Drawing;
using System.Data;
using FastReport;
using FastReport.Data;
using FastReport.Dialog;
using FastReport.Barcode;
using FastReport.Table;
using FastReport.Utils;

namespace FastReport
{
  public class ReportScript
  { 
    
    #region VariablesGenerales
    public string nombreUniversidad;
    public string extension;
    public string nombreCampus;
    public string encabezado;
    
    public string nombreAlumno;
    public string fechaNacimiento;
    public string domicilio;
    public string carrera;
    public string matricula;
    public string interesado_a;
    
    public string medida;
    public string semestre;
    public string creditos;
    public string calificacionMateria;
    public string calificacionLetra;
    public string fechaExamen;
    public string folio;
    public string posicion;
    public string ciclo;
    public string tipoExamen;
    public string carrera_pos;
    
    public string responsable;
    public string puesto;
    
    public double calificacion = 0;
    public int contadorMaterias = 0;
    public double sumaCalificaciones = 0;
    public string letra = &quot;&quot;;
    public double promedio = 0;
    public double promedio1 = 0;
    public string LetraPromedio;
    public double sumaCreditos = 0;
    public string creditosTotales = &quot;0&quot;;
    public string promedioFinal = &quot;&quot;;
    public string pos = &quot;&quot;;
    #endregion
    
    #region Fuciones
    public string _nombreUniversidad()
    { 
      string id_campus = ((String)Report.GetColumnValue(&quot;LogoCampus.ID_Campus&quot;));
      switch(id_campus)
      {  
        case &quot;03&quot;: case &quot;12&quot;: 
          return &quot;Universidad de Durango&quot;;
          break;
        default:
          return &quot;Universidad Autónoma de Durango&quot;;
          break;
      }
    }
    
    public string _extension()
    {
      string id_campus = ((String)Report.GetColumnValue(&quot;LogoCampus.ID_Campus&quot;));
      switch (id_campus)
      {
        case &quot;04&quot;:
          return &quot;Extensión Santiago Papasquiaro\n&quot;;
          break;
        case &quot;11&quot;:
          return &quot;Extensión Gómez Palacio\n&quot;;
          break;
        default:
          return &quot;&quot;;
          break;
      }
    }
    
    public string _nombreCampus()
    {
      string id_campus = ((String)Report.GetColumnValue(&quot;LogoCampus.ID_Campus&quot;));
      switch (id_campus)
      {
        case &quot;02&quot;:
          return &quot;&quot;;
          break;
        case &quot;04&quot;:
          return &quot;&quot;;
          break;
        case &quot;05&quot;:
          return &quot;&quot;;
          break;
        case &quot;14&quot;:
          return &quot;Campus Obregón&quot;;
          break;
        case &quot;18&quot;:
          return &quot;Campus Virtual&quot;;
          break;
        case &quot;29&quot;:
          return &quot;Campus Ejecutivas&quot;;
          break;
        case &quot;40&quot;:
          return &quot;Campus Ciudad de México&quot;;
          break;
        default:
          return &quot;Campus &quot; + ((String)Report.GetColumnValue(&quot;LogoCampus.Campus&quot;));
          break;
      }
    }
    
    public string _encabezado()
    {
      return ((String)Report.GetColumnValue(&quot;CardexGrupo.Encabezado&quot;));
    }

    public string _nombreAlumno()
    {
      return  UpperCase(((String)Report.GetColumnValue(&quot;CardexGrupo.Paterno&quot;)) + &quot; &quot; +
        ((String)Report.GetColumnValue(&quot;CardexGrupo.Materno&quot;)) + &quot; &quot; +
        ((String)Report.GetColumnValue(&quot;CardexGrupo.Nombre&quot;)));
    }
    
    public string _fechaNacimiento()
    {
      return ((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaNacimiento&quot;)).ToString(&quot;dd 'de' MMMM 'de' yyyy&quot;);
    }
    
    public string _domicilio()
    {
      return  ((String)Report.GetColumnValue(&quot;CardexGrupo.Calle&quot;)) + &quot; &quot; + 
        ((String)Report.GetColumnValue(&quot;CardexGrupo.Colonia&quot;)) + &quot; C.P. &quot; + 
        ((String)Report.GetColumnValue(&quot;CardexGrupo.CP&quot;));
    }
    
    public string _carrera()
    {
      return TitleCase(LowerCase(((String)Report.GetColumnValue(&quot;CardexGrupo.Carrera&quot;))));
    }
    
    public string _matricula()
    {
      return ((String)Report.GetColumnValue(&quot;CardexGrupo.ID_AlumnoX&quot;));  
    }
    
    public string _interesado_a()
    {
      return ((String)Report.GetColumnValue(&quot;CardexGrupo.Sexo&quot;)) == &quot;F&quot; ? &quot;a la interesada&quot; : &quot;al interesado&quot;;
    }

    public string _medida()
    {
      string med = UpperCase(((String)Report.GetColumnValue(&quot;CardexGrupo.Medida&quot;)));
      
      switch(med)
      {
        case &quot;SEM&quot;: case &quot;SEMEST&quot;:
          return &quot;SEMESTRE&quot;;
          break;
        case &quot;STD&quot;: case &quot;EJEC&quot;: case &quot;EJE&quot;: case &quot;CUATRI&quot;: case &quot;CUA&quot;: case &quot;SAB&quot;: case &quot;VES&quot;: case &quot;POS&quot;:
          return &quot;CUATRIMESTRE&quot;;
          break;
        default:
          return &quot;SEMESTRE&quot;;
          break;
      }
    }
    
    public string _semestre()
    {
      string sem = ((String)Report.GetColumnValue(&quot;CardexGrupo.Semestre&quot;));
      switch(sem)
      {
        case &quot;01&quot;:
          return &quot;PRIMER&quot;;
          break;
        case &quot;02&quot;:
          return &quot;SEGUNDO&quot;;
          break;
        case &quot;03&quot;: 
          return &quot;TERCER&quot;;
          break;
        case &quot;04&quot;:
          return &quot;CUARTO&quot;;
          break;
        case &quot;05&quot;:
          return &quot;QUINTO&quot;;
          break;
        case &quot;06&quot;:
          return &quot;SEXTO&quot;;
          break;
        case &quot;07&quot;:
          return &quot;SÉPTIMO&quot;;
          break;
        case &quot;08&quot;:
          return &quot;OCTAVO&quot;;
          break;
        case &quot;09&quot;:
          return &quot;NOVENO&quot;;
          break;
        case &quot;10&quot;:
          return &quot;DÉCIMO&quot;;
          break;
        case &quot;11&quot;:
          return &quot;ONCEAVO&quot;;
          break;
        case &quot;12&quot;:
          return &quot;DOCEAVO&quot;;
          break;
        case &quot;13&quot;:
          return &quot;TRECEAVO&quot;;
          break;
        case &quot;14&quot;:
          return &quot;CATORCEAVO&quot;;
          break;
        default:
          return &quot;&quot;;
          break;
      }
    }
    
    public string _creditos()
    {
      return (Report.GetColumnValue(&quot;CardexGrupo.Creditos&quot;)).ToString(); 
    }
    
   /* public string _calificacionMateria()
    {
      int band = getBandera();
      double minima = Convert.ToDouble((Report.GetColumnValue(&quot;CardexGrupo.CalificacionMinima&quot;)));
      switch(band)
      {
        case 1: //ORDINARIO
          calificacion = Convert.ToDouble((Report.GetColumnValue(&quot;CardexGrupo.Ordinario&quot;)));
          if(calificacion &gt;= minima) 
          {
            contadorMaterias++;
            sumaCalificaciones += calificacion;
            sumaCreditos += Convert.ToDouble((Report.GetColumnValue(&quot;CardexGrupo.Creditos&quot;)));
          }
          if(calificacion.ToString().Length == 1 || calificacion.ToString() == &quot;10&quot;)
            return calificacion.ToString() + &quot;.0&quot;;
          else 
            return calificacion.ToString();
          break;
        case 2: //EXTRAORDINARIO
          calificacion = Convert.ToDouble((Report.GetColumnValue(&quot;CardexGrupo.Extraordinario&quot;)));
          if(calificacion &gt;= minima) 
          {
            contadorMaterias++;
            sumaCalificaciones += calificacion;
            sumaCreditos += Convert.ToDouble((Report.GetColumnValue(&quot;CardexGrupo.Creditos&quot;)));
          }
          if(calificacion.ToString().Length == 1 || calificacion.ToString() == &quot;10&quot;)
            return calificacion.ToString() + &quot;.0&quot;;
          else 
            return calificacion.ToString();
          break;
        case 3: //TITULO
          calificacion = Convert.ToDouble((Report.GetColumnValue(&quot;CardexGrupo.Titulo&quot;)));
          if(calificacion &gt;= minima) 
          {
            contadorMaterias++;
            sumaCalificaciones += calificacion;
            sumaCreditos += Convert.ToDouble((Report.GetColumnValue(&quot;CardexGrupo.Creditos&quot;)));
          }
          if(calificacion.ToString().Length == 1 || calificacion.ToString() == &quot;10&quot;)
            return calificacion.ToString() + &quot;.0&quot;;
          else 
            return calificacion.ToString();
          break;
        case 4: //EQUIVALENCIA
          calificacion = Convert.ToDouble((Report.GetColumnValue(&quot;CardexGrupo.Equivalencia&quot;)));
          if(calificacion &gt;= minima) 
          {
            contadorMaterias++;
            sumaCalificaciones += calificacion;
            sumaCreditos += Convert.ToDouble((Report.GetColumnValue(&quot;CardexGrupo.Creditos&quot;)));
          }
          if(calificacion.ToString().Length == 1 || calificacion.ToString() == &quot;10&quot;)
            return calificacion.ToString() + &quot;.0&quot;;
          else 
            return calificacion.ToString();
          break;
        case 5: 
          return &quot;*&quot;;
          break;
        default:
          return &quot;&quot;;
          break;
      }
    } */
    
    public string _calificacionMateria2()
    {
      int band = getBandera();
      double minima = ((Int32)Report.GetColumnValue(&quot;CardexGrupo.CalificacionMinima&quot;));
      switch(band)
      {
        case 1: //ORDINARIO
          calificacion = ((Int32)Report.GetColumnValue(&quot;CardexGrupo.Ordinario2&quot;));
          
          if(calificacion &gt;= minima) 
          {
            contadorMaterias++;
            sumaCalificaciones += calificacion;
            sumaCreditos += ((Double)Report.GetColumnValue(&quot;CardexGrupo.Creditos&quot;));
          }
          return calificacion.ToString();    
          break;
        
        case 2: //EXTRAORDINARIO
          calificacion = ((Int32)Report.GetColumnValue(&quot;CardexGrupo.Extraordinario2&quot;));
          if(calificacion &gt;= minima) 
          {
            contadorMaterias++;
            sumaCalificaciones += calificacion;
            sumaCreditos += ((Double)Report.GetColumnValue(&quot;CardexGrupo.Creditos&quot;));
          }
          
          return calificacion.ToString();
          break;
        
        case 3: //TITULO
          calificacion = ((Int32)Report.GetColumnValue(&quot;CardexGrupo.Titulo2&quot;));
          if(calificacion &gt;= minima) 
          {
            contadorMaterias++;
            sumaCalificaciones += calificacion;
            sumaCreditos += ((Double)Report.GetColumnValue(&quot;CardexGrupo.Creditos&quot;));
          }
          return calificacion.ToString();
          break;
        
        case 4: //EQUIVALENCIA
          calificacion = ((Int32)Report.GetColumnValue(&quot;CardexGrupo.Equivalencia2&quot;));
          if(calificacion &gt;= minima) 
          {
            contadorMaterias++;
            sumaCalificaciones += calificacion;
            sumaCreditos += ((Double)Report.GetColumnValue(&quot;CardexGrupo.Creditos&quot;));
          }    
          return calificacion.ToString();
          break;       
        
        case 5:           
          return &quot;*&quot;;
          break;
        
        case 6:           
          return &quot;*&quot;;
          break;
        default:
          return &quot;&quot;;
          break;
      }
    }
     
    public string _calificacionLetra2()
    {
      int band =getBandera();
      int califFLetra;
      string letra;
      
      switch(band){
        case 1: //ORDINARIO
          calificacion = ((Int32)Report.GetColumnValue(&quot;CardexGrupo.Ordinario2&quot;));    
          letra = Replace(TitleCase(Replace((Replace((Replace(ToWordsEs(Math.Truncate(calificacion)),&quot;euros con 00 centavos&quot;,&quot;&quot;)),&quot;.&quot;,&quot;y&quot;)),&quot;un&quot;,&quot;uno&quot;)),&quot;Y&quot;,&quot;y&quot;);
          return letra;
        case 2: //EXTRAORDINARIO
          calificacion = ((Int32)Report.GetColumnValue(&quot;CardexGrupo.Extraordinario2&quot;));
          letra = Replace(TitleCase(Replace((Replace((Replace(ToWordsEs(Math.Truncate(calificacion)),&quot;euros con 00 centavos&quot;,&quot;&quot;)),&quot;.&quot;,&quot;y&quot;)),&quot;un&quot;,&quot;uno&quot;)),&quot;Y&quot;,&quot;y&quot;);
          return letra;
        case 3: //TITULO
          calificacion = ((Int32)Report.GetColumnValue(&quot;CardexGrupo.Titulo2&quot;));
          letra = Replace(TitleCase(Replace((Replace((Replace(ToWordsEs(Math.Truncate(calificacion)),&quot;euros con 00 centavos&quot;,&quot;&quot;)),&quot;.&quot;,&quot;y&quot;)),&quot;un&quot;,&quot;uno&quot;)),&quot;Y&quot;,&quot;y&quot;);
          return letra;
        case 4: //EQUIVALENCIA
          calificacion = ((Int32)Report.GetColumnValue(&quot;CardexGrupo.Equivalencia2&quot;)); 
          letra = Replace(TitleCase(Replace((Replace((Replace(ToWordsEs(Math.Truncate(calificacion)),&quot;euros con 00 centavos&quot;,&quot;&quot;)),&quot;.&quot;,&quot;y&quot;)),&quot;un&quot;,&quot;uno&quot;)),&quot;Y&quot;,&quot;y&quot;);
          return letra;
        case 5:           
          return &quot;&quot;; 
          break; 
        case 6:           
          return &quot;&quot;; 
          break; 
        default:
          return &quot;&quot;;
          break;          
      } 
    }
        
    public string _folio()
    {
      int bandera = getBandera();
      switch (bandera)
      {
        case 1:
          return ((String)Report.GetColumnValue(&quot;CardexGrupo.FolioOrdinario&quot;));
          break;
        case 2:
          return ((String)Report.GetColumnValue(&quot;CardexGrupo.FolioExtraordinario&quot;));
          break;
        case 3:
          return ((String)Report.GetColumnValue(&quot;CardexGrupo.FolioTit&quot;));
          break;
        case 4:
          return ((String)Report.GetColumnValue(&quot;CardexGrupo.FolioEquivalencia&quot;));
          break;
        default:
          return &quot;&quot;;
          break;
      }
    }
    
    public string _posicion()
    {
      int bandera = getBandera();
      switch (bandera)
      {
        case 1:  
          return ((String)Report.GetColumnValue(&quot;CardexGrupo.PosicionActaOrd&quot;));
          break;
        case 2:
          return ((String)Report.GetColumnValue(&quot;CardexGrupo.PosicionActaExt&quot;));
          break;
        case 3:
          return ((String)Report.GetColumnValue(&quot;CardexGrupo.PosicionActaTit&quot;));
          Year(((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaTit&quot;)));
          break;
        case 4:
          return &quot;&quot;;
          break;
        default:
          return &quot;&quot;;
          break;
      }
    }
    
    public string _ciclo()
    {
      return ((String)Report.GetColumnValue(&quot;CardexGrupo.CicloEscolar&quot;));
    }
    
    public string _fechaExamen()
    {
      int bandera = getBandera();
       
      switch (bandera)
      {
        case 1:
         
             return Day(((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaOrdinario&quot;))).ToString(&quot;00&quot;) + &quot;-&quot; +
            ToRoman(Month(((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaOrdinario&quot;))))+&quot;-&quot;+
            Year(((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaOrdinario&quot;)));
          break;
         case 2:
          if(((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaExtraordinario&quot;))==null)  return &quot;&quot;;
          else return Day(((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaExtraordinario&quot;))).ToString(&quot;00&quot;)+ &quot;-&quot; +
            ToRoman(Month(((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaExtraordinario&quot;))))+&quot;-&quot;+
            Year(((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaExtraordinario&quot;)));
          break;
        case 3: 
          if(((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaTitulo&quot;))==null)return &quot;&quot;;
          else return Day(((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaTitulo&quot;))).ToString(&quot;00&quot;)+ &quot;-&quot; +
            ToRoman(Month(((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaTitulo&quot;))))+&quot;-&quot;+
            Year(((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaTitulo&quot;)));
          break;
        case 4:  
          return                     
            Day(((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaEquivalencia&quot;))).ToString(&quot;00&quot;)+ &quot;-&quot; +
            ToRoman(Month(((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaEquivalencia&quot;))))+&quot;-&quot;+
           Year(((DateTime)Report.GetColumnValue(&quot;CardexGrupo.FechaEquivalencia&quot;))) ;  
          break; 
        default:
          return &quot;&quot;;
          break;
        
      }
    }
    
    public string _tipoExamen()
    {
      int band =getBandera();
      switch(band)
      {
        case 1: 
          return &quot;ORD&quot;;
          break;
        case 2: 
          return &quot;EE&quot;;
          break;
        case 3:                                                                                
          return &quot;ETS&quot;;
          break;
        case 4:                                                                                
          if(((Int32)Report.GetColumnValue(&quot;CardexGrupo.Revalida&quot;)) == 1)
            return &quot;REV&quot;;
          else
            return &quot;EQU&quot;;
          break;
        case 5:                                                                                
          return &quot;&quot;;
          break;
        default:
          return &quot;&quot;;
          break;
      }
    }
    
    public string _carrera_posgrado()
    {
      if( ((Int32)Report.GetColumnValue(&quot;CardexGrupo.TipoUniv&quot;))== 3 )
      {    
        return &quot;Posgrado&quot;;
      }
      else
      {
        return &quot;Carrera&quot;;    
      } 
    }
    
    public string _responsable()
    {
      return TitleCase(LowerCase(((String)Report.GetColumnValue(&quot;CardexGrupo.TituloEncargadoCE&quot;)) + &quot; &quot; + ((String)Report.GetColumnValue(&quot;CardexGrupo.EncargadoCE&quot;))));
    }
    
    public string _puesto()
    {
      string ID_Campus = ((String)Report.GetColumnValue(&quot;CardexGrupo.ID_Campus&quot;));
      switch (ID_Campus)
      {
        case &quot;01&quot;: case &quot;13&quot;: case &quot;29&quot;: 
          return &quot;Directora de Control Escolar&quot;;
          break;
        case &quot;02&quot;:
          return ((String)Report.GetColumnValue(&quot;CardexGrupo.SexoEncargadoCE&quot;)) == &quot;M&quot; ? &quot;Jefe del departamento de Control Escolar&quot; : &quot;Jefa del departamento de Control Escolar&quot;;
          break;
        case &quot;07&quot;: case &quot;31&quot;:
          return &quot;Secretario Académico General&quot;;
          break;
        case &quot;14&quot;:
          return ((String)Report.GetColumnValue(&quot;CardexGrupo.SexoEncargadoCE&quot;)) == &quot;M&quot; ? &quot;Director de Control Escolar&quot; : &quot;Directora de Control Escolar&quot;;
          break;
        default:
          return &quot;Responsable de Control Escolar&quot;;
          break;
      }
    }
    
    public double _promedio()
    {
      return ((String)Report.GetColumnValue(&quot;CardexGrupo.ID_Campus&quot;)) == &quot;12&quot; ?
        (Math.Truncate((ToDouble(Report.GetTotalValue(&quot;Promedio&quot;))))) :
        double.Parse(Report.GetTotalValue(&quot;Promedio&quot;));
    }
    
    public string _promedioLetra()
    {
      return promedioLetra(_promedio());
    }
    
    public string _sumaCredtitos()
    {
      return sumaCreditos.ToString();
    }
    
    #endregion
    
    #region Métodos y Cálculos
    
    private int getBandera()
    {
      double valorOrd = ((Double)Report.GetColumnValue(&quot;CardexGrupo.Ordinario&quot;));
      double valorExt = ((Double)Report.GetColumnValue(&quot;CardexGrupo.Extraordinario&quot;));
      double valorTit = ((Double)Report.GetColumnValue(&quot;CardexGrupo.Titulo&quot;));
      double valorEqv = ((Double)Report.GetColumnValue(&quot;CardexGrupo.Equivalencia&quot;));  
      
      if(valorOrd&gt;0 &amp;&amp; valorExt==0 &amp;&amp; valorTit==0 &amp;&amp; valorEqv==0)
      {
        return valorOrd &lt; ((Int32)Report.GetColumnValue(&quot;CardexGrupo.CalificacionMinima&quot;)) ? 5 : 1;  
        //return 1; //ORDINARIO
      }
      else if(valorOrd==0 &amp;&amp; valorExt&gt;0 &amp;&amp; valorTit==0 &amp;&amp; valorEqv==0)
      {
        return valorExt &lt; ((Int32)Report.GetColumnValue(&quot;CardexGrupo.CalificacionMinima&quot;)) ? 5 : 2;  
        //return 1; //EXTRAORDINARIO
      }
      else if(valorOrd&gt;0 &amp;&amp; valorExt&gt;0 &amp;&amp; valorTit==0 &amp;&amp; valorEqv==0)
      {
        return valorExt &lt; ((Int32)Report.GetColumnValue(&quot;CardexGrupo.CalificacionMinima&quot;)) ? 5 : 2; 
        //return 2; //EXTRAORDINARIO  
      }
      else if(valorOrd&gt;0 &amp;&amp; valorExt&gt;0 &amp;&amp; valorTit&gt;0 &amp;&amp; valorEqv==0)
      {
        return valorTit &lt; ((Int32)Report.GetColumnValue(&quot;CardexGrupo.CalificacionMinima&quot;)) ? 5 : 3; 
        //return 3; //TITULO
      }  
      else if(valorEqv&gt;0)
      {  
        if(valorOrd&gt;0 &amp;&amp; valorExt&gt;0 &amp;&amp; valorTit&gt;0 &amp;&amp; valorEqv&gt;0)
        {
          return 4; //EQUIVALENCIA
        }
        else if(valorOrd==0 &amp;&amp; valorExt==0 &amp;&amp; valorTit==0 &amp;&amp; valorEqv&gt;0)
        {
          return 4; //EQUIVALENCIA
        }
        else if(valorOrd==0 &amp;&amp; valorExt==0 &amp;&amp; valorTit&gt;0 &amp;&amp; valorEqv&gt;0)
        {
          return 4; //EQUIVALENCIA
        }  
        else
        {
          return 6;
        }  
      }
      else if(valorOrd==0 &amp;&amp; valorExt==0 &amp;&amp; valorTit==0 &amp;&amp; valorEqv==0)
      {
        return 5; //*
      }
      else
      {
        return 6;
      }
    } 
    private string numeroLetra(double calificacion)
    {
      string ret = &quot;&quot;;
  
      string  numero = calificacion.ToString();
      string[]  sep = numero.Split('.');
      for(int g = 0; g &lt;sep.Length; g++)
      {
        if(sep[g].Equals(&quot;1&quot;))
          ret+= &quot;Uno&quot;;
        if(sep[g].Equals(&quot;2&quot;))
          ret+= &quot;Dos&quot;;
        if(sep[g].Equals(&quot;3&quot;))
          ret+= &quot;Tres&quot;;
        if(sep[g].Equals(&quot;4&quot;))
          ret+= &quot;Cuatro&quot;;
        if(sep[g].Equals(&quot;5&quot;))
          ret+= &quot;Cinco&quot;;
        if(sep[g].Equals(&quot;6&quot;))
          ret+= &quot;Seis&quot;;
        if(sep[g].Equals(&quot;7&quot;))
          ret+= &quot;Siete&quot;;
        if(sep[g].Equals(&quot;8&quot;))
          ret+= &quot;Ocho&quot;;
        if(sep[g].Equals(&quot;9&quot;))
          ret+= &quot;Nueve&quot;;
        if(sep[g].Equals(&quot;10&quot;))
          ret+= &quot;Diez&quot;;
        if(sep[g].Equals(&quot;0&quot;))
          ret+= &quot;Cero&quot;;
        if(sep.Length &gt; g+1)
          ret+= &quot;   .   &quot;;
      }        
      return ret;
    }
    private string promedioLetra(double calificacion)
    {
      string ret = &quot;&quot;;
  
      string  numero = calificacion.ToString();
      string[]  sep = numero.Split('.');
      for(int g = 0; g &lt;sep.Length; g++)
      {
        if(sep[g].Equals(&quot;1&quot;))
          ret+= &quot;uno&quot;;
        if(sep[g].Equals(&quot;2&quot;))
          ret+= &quot;dos&quot;;
        if(sep[g].Equals(&quot;3&quot;))
          ret+= &quot;tres&quot;;
        if(sep[g].Equals(&quot;4&quot;))
          ret+= &quot;cuatro&quot;;
        if(sep[g].Equals(&quot;5&quot;))
          ret+= &quot;cinco&quot;;
        if(sep[g].Equals(&quot;6&quot;))
          ret+= &quot;seis&quot;;
        if(sep[g].Equals(&quot;7&quot;))
          ret+= &quot;siete&quot;;
        if(sep[g].Equals(&quot;8&quot;))
          ret+= &quot;ocho&quot;;
        if(sep[g].Equals(&quot;9&quot;))
          ret+= &quot;nueve&quot;;
        if(sep[g].Equals(&quot;10&quot;))
          ret+= &quot;diez&quot;;
        if(sep[g].Equals(&quot;0&quot;))
          ret+= &quot;cero&quot;;
        if(sep.Length &gt; g+1)
          ret+= &quot; punto &quot;;
      }        
      return ret;
    }
    #endregion    
    
    private void Text1_BeforePrint(object sender, EventArgs e)
    {
      nombreUniversidad = _nombreUniversidad();
    }
    private void Text2_BeforePrint(object sender, EventArgs e)
    {
      extension = _extension();
      nombreCampus = _nombreCampus();
    }
    private void Text3_BeforePrint(object sender, EventArgs e)
    {
      encabezado = _encabezado();
    }
    private void Text10_BeforePrint(object sender, EventArgs e)
    {
      nombreAlumno = _nombreAlumno();
    }
    private void Text11_BeforePrint(object sender, EventArgs e)
    {
      fechaNacimiento = _fechaNacimiento();
    }
    private void Text12_BeforePrint(object sender, EventArgs e)
    {
      domicilio = _domicilio();
    }
    private void Text13_BeforePrint(object sender, EventArgs e)
    {
      carrera = _carrera();
    }
    private void Text14_BeforePrint(object sender, EventArgs e)
    {
      matricula = _matricula();
    }
    private void Text28_BeforePrint(object sender, EventArgs e)
    {
      semestre = _semestre();
      medida = _medida();
    }
    private void Text8_BeforePrint(object sender, EventArgs e)
    {
      carrera_pos = _carrera_posgrado();
    }
    private void Text32_BeforePrint(object sender, EventArgs e)
    {
      creditos = _creditos();
    }
    
    //CALIFICACION MATERIA
    private void Text33_BeforePrint(object sender, EventArgs e)
    {
      calificacionMateria = _calificacionMateria2();    
    }
    
    //CALIFICACION MATERIA EN LETRA
    private void Text34_BeforePrint(object sender, EventArgs e)
    {
      // calificacionLetra = _calificacionLetra();
      calificacionLetra=_calificacionLetra2();   
    }
    private void Text36_BeforePrint(object sender, EventArgs e)
    {
      folio = _folio();
    }

    //CICLO ESCOLAR
    private void Text35_BeforePrint(object sender, EventArgs e)
    {
      ciclo = _ciclo();
    }
    private void Text39_BeforePrint(object sender, EventArgs e)
    {
      tipoExamen = _tipoExamen();
    }
    private void Text38_BeforePrint(object sender, EventArgs e)
    {
      fechaExamen = _fechaExamen();
    }
    private void Text29_BeforePrint(object sender, EventArgs e)
    {
      interesado_a = _interesado_a();
      promedio1 = _promedio();
      promedioFinal = ((String)Report.GetColumnValue(&quot;CardexGrupo.ID_Campus&quot;)) == &quot;12&quot; ? promedio1.ToString() : promedio1.ToString(&quot;##.##&quot;);
      LetraPromedio = _promedioLetra();
      creditosTotales = _sumaCredtitos();
    }
    private void Text30_BeforePrint(object sender, EventArgs e)
    {
      responsable = _responsable();
    }
    private void Text31_BeforePrint(object sender, EventArgs e)
    {
      puesto = _puesto();
    }
    private void Data1_BeforePrint(object sender, EventArgs e)
    { 
      if( ((Int32)Report.GetColumnValue(&quot;CardexGrupo.NoSemestre&quot;))== 11 || ((Int32)Report.GetColumnValue(&quot;CardexGrupo.NoSemestre&quot;)) == 12)
      {
        Text26.Visible = false;
        Text33.Visible = false;
        Text32.Visible = false;
        Text34.Visible = false;
        Text35.Visible = false;
        Text36.Visible = false;
        Text38.Visible = false;
        Text39.Visible = false;
      }
      else
      {
        Text26.Visible = true;
        Text33.Visible = true;
        Text32.Visible = true;
        Text34.Visible = true;
        Text35.Visible = true;
        Text36.Visible = true;
        Text38.Visible = true;
        Text39.Visible = true;
      }   
    }
    
    int i = 0;
    private void Text23_BeforePrint(object sender, EventArgs e)
    {
      i = getBandera();
    }
  }
}
</ScriptText>
  <Dictionary>
    <MsSqlDataConnection Name="Connection" ConnectionString="rijcmlqqtzWLe5YNkM503qc41kpcML9Y0VS0gkX6+25qs61SwQ8EKFvKJKukMo1KufPxt0zXVmBE58eSZam2qgG8cvuy64TegLJX8HFXpCHHKBQeokOf7vaGsL90jHVywPXmXm2Z7TQShPuWnDiDfRd6xpkT5Qlj5zkihhkFwRYr+fJ8paI4pPpGj6JUi3mzlE1c0CeiYj5YLSTP9XPUthU7KzeKCQgejWRXt8Tg/2aTOFqmhI=">
      <TableDataSource Name="Table" Alias="CardexGrupo" DataType="System.Int32" Enabled="true" SelectCommand="DECLARE	@return_value int&#13;&#10;&#13;&#10;EXEC	@return_value = [dbo].[RPTCardexGrupo]&#13;&#10;		@ID_Grupo&#13;&#10;&#13;&#10;SELECT	'Return Value' = @return_value&#13;&#10;">
        <Column Name="ID_Campus" DataType="System.String"/>
        <Column Name="ID_Alumno2" DataType="System.String"/>
        <Column Name="ID_Especialidad" DataType="System.String"/>
        <Column Name="Carrera" DataType="System.String"/>
        <Column Name="TipoUniv" DataType="System.String"/>
        <Column Name="Medida" DataType="System.String"/>
        <Column Name="Clave" DataType="System.String"/>
        <Column Name="DescripcionMateria" DataType="System.String"/>
        <Column Name="Creditos" DataType="System.Double"/>
        <Column Name="Ordinario" DataType="System.Double"/>
        <Column Name="FolioOrdinario" DataType="System.String"/>
        <Column Name="FechaOrdinario" DataType="System.DateTime"/>
        <Column Name="Extraordinario" DataType="System.Double"/>
        <Column Name="FolioExtraordinario" DataType="System.String"/>
        <Column Name="FechaExtraordinario" DataType="System.DateTime"/>
        <Column Name="Titulo" DataType="System.Double"/>
        <Column Name="FolioTit" DataType="System.String"/>
        <Column Name="FechaTitulo" DataType="System.DateTime"/>
        <Column Name="Equivalencia" DataType="System.Double"/>
        <Column Name="Revalida" DataType="System.Int32"/>
        <Column Name="Repeticion" DataType="System.Int32"/>
        <Column Name="PosicionActaOrd" DataType="System.String"/>
        <Column Name="PosicionActaExt" DataType="System.String"/>
        <Column Name="PosicionActaTit" DataType="System.String"/>
        <Column Name="ID_Periodo" DataType="System.String"/>
        <Column Name="Descripcion" DataType="System.String"/>
        <Column Name="TituloEncargadoCE" DataType="System.String"/>
        <Column Name="EncargadoCE" DataType="System.String"/>
        <Column Name="Puesto" DataType="System.String"/>
        <Column Name="Orden" DataType="System.String"/>
        <Column Name="Semestre" DataType="System.String"/>
        <Column Name="NoSemestre" DataType="System.Int32"/>
        <Column Name="TituloDirector" DataType="System.String"/>
        <Column Name="DirectorCampus" DataType="System.String"/>
        <Column Name="CalificacionMinima" DataType="System.Int32"/>
        <Column Name="SexoEncargadoCE" DataType="System.String"/>
        <Column Name="ID_AlumnoX" DataType="System.String"/>
        <Column Name="Paterno" DataType="System.String"/>
        <Column Name="Materno" DataType="System.String"/>
        <Column Name="Nombre" DataType="System.String"/>
        <Column Name="Sexo" DataType="System.String"/>
        <Column Name="Calle" DataType="System.String"/>
        <Column Name="Colonia" DataType="System.String"/>
        <Column Name="CP" DataType="System.String"/>
        <Column Name="FechaNacimiento" DataType="System.DateTime"/>
        <Column Name="Encabezado" DataType="System.String"/>
        <Column Name="ClaveEscuela" DataType="System.String"/>
        <Column Name="Campus" DataType="System.String"/>
        <Column Name="Fecha_Inicio" DataType="System.String"/>
        <Column Name="Ordinario2" DataType="System.Int32"/>
        <Column Name="Extraordinario2" DataType="System.Int32"/>
        <Column Name="Titulo2" DataType="System.Int32"/>
        <Column Name="Equivalencia2" DataType="System.Int32"/>
        <Column Name="CicloEscolar" DataType="System.String"/>
        <Column Name="ID_Rvoe" DataType="System.Int32"/>
        <Column Name="FolioEquivalencia" DataType="System.String"/>
        <Column Name="FechaEquivalencia" DataType="System.DateTime"/>
        <CommandParameter Name="@ID_Grupo" DataType="22" Expression="[@ID_Grupo]"/>
      </TableDataSource>
      <TableDataSource Name="Table2" Alias="LogoCampus" DataType="System.Int32" Enabled="true" SelectCommand="DECLARE	@return_value int&#13;&#10;&#13;&#10;EXEC	@return_value = [dbo].[LogosCampus]&#13;&#10;		@ID_Alumno&#13;&#10;&#13;&#10;SELECT	'Return Value' = @return_value&#13;&#10;">
        <Column Name="Logo" DataType="System.Byte[]" BindableControl="Picture"/>
        <Column Name="Campus" DataType="System.String"/>
        <Column Name="ID_Campus" DataType="System.String"/>
        <CommandParameter Name="@ID_Alumno" DataType="22" Expression="[CardexGrupo.ID_AlumnoX]"/>
      </TableDataSource>
    </MsSqlDataConnection>
    <Parameter Name="@ID_Grupo" DataType="System.Int32" Expression="106621"/>
    <Total Name="Promedio" TotalType="Avg" Expression="ToDecimal(calificacionMateria);" Evaluator="Data1" PrintOn="GroupFooter1" EvaluateCondition="calificacionMateria!=&quot;&quot;&amp;&amp;calificacionMateria!=&quot;*&quot;&amp;&amp;([CardexGrupo.Equivalencia2]&gt;0||ToDouble(calificacionMateria)&gt;=70);"/>
    <Total Name="Creditos" Expression="[CardexGrupo.Creditos]" Evaluator="Data1" PrintOn="GroupFooter1" EvaluateCondition="calificacionMateria!=&quot;&quot;&amp;&amp;calificacionMateria!=&quot;*&quot;&amp;&amp;([CardexGrupo.Equivalencia2]&gt;0||ToDouble(calificacionMateria)&gt;=70);"/>
    <Total Name="Materias" TotalType="Count" Evaluator="Data1" PrintOn="GroupFooter1" EvaluateCondition="calificacionMateria!=&quot;&quot;&amp;&amp;calificacionMateria!=&quot;*&quot;&amp;&amp;([CardexGrupo.Equivalencia2]&gt;0||ToDouble(calificacionMateria)&gt;=70);"/>
  </Dictionary>
  <ReportPage Name="Page1" PaperWidth="215.9" PaperHeight="355.6" LeftMargin="4" TopMargin="5" RightMargin="4" BottomMargin="5" FirstPageSource="15" OtherPagesSource="15" Guides="784.35,0,56.7,302.4,349.65,434.7,500.85,604.8,727.65,255.15">
    <PageHeaderBand Name="PageHeader1" Width="785.86"/>
    <GroupHeaderBand Name="GroupHeader1" Top="2.27" Width="785.86" Height="226.9" BeforePrintEvent="GroupHeader1_BeforePrint" StartNewPage="true" OutlineExpression="[CardexGrupo.Paterno] +' '+ [CardexGrupo.Materno] +' '+ [CardexGrupo.Nombre]" KeepWithData="true" Condition="[CardexGrupo.Paterno] +' '+ [CardexGrupo.Materno] +' '+ [CardexGrupo.Nombre]">
      <TextObject Name="Text1" Left="217.35" Width="538.65" Height="28.35" BeforePrintEvent="Text1_BeforePrint" Text="[nombreUniversidad]" HorzAlign="Center" Font="Times New Roman, 18pt, style=Bold"/>
      <TextObject Name="Text2" Left="217.35" Top="18.9" Width="538.65" Height="37.8" BeforePrintEvent="Text2_BeforePrint" Text="&lt;b&gt;[extension][nombreCampus]&lt;/b&gt;" HorzAlign="Center" VertAlign="Center" Font="Times New Roman, 12pt, style=Bold" HtmlTags="true"/>
      <TextObject Name="Text3" Left="217.35" Top="56.7" Width="538.65" Height="47.25" CanGrow="true" BeforePrintEvent="Text3_BeforePrint" CanBreak="false" Text="[encabezado]" HorzAlign="Justify" Font="Arial, 9pt, style=Bold"/>
      <TextObject Name="Text4" Left="217.35" Top="113.4" Width="538.65" Height="18.9" Text="Cárdex de Alumno" HorzAlign="Center" Font="Times New Roman, 15pt, style=Bold, Italic"/>
      <TextObject Name="Text5" Left="207.9" Top="141.85" Width="141.75" Height="15.12" Text="Nombre del Alumno:" Font="Arial, 8pt, style=Bold"/>
      <TextObject Name="Text10" Left="349.65" Top="141.85" Width="434.7" Height="15.12" BeforePrintEvent="Text10_BeforePrint" Text="[nombreAlumno]" HorzAlign="Justify" Font="Arial, 8pt"/>
      <TextObject Name="Text6" Left="207.9" Top="156.97" Width="141.75" Height="15.12" Text="Fecha de Nacimiento:" Font="Arial, 8pt, style=Bold"/>
      <TextObject Name="Text7" Left="207.9" Top="172.09" Width="141.75" Height="15.12" Text="Domicilio:" Font="Arial, 8pt, style=Bold"/>
      <TextObject Name="Text11" Left="349.65" Top="156.97" Width="434.7" Height="15.12" BeforePrintEvent="Text11_BeforePrint" Text="[fechaNacimiento]" Format="Custom" Format.Format="dd 'de' MMMM 'de 'YYYY'" HorzAlign="Justify" Font="Arial, 8pt"/>
      <TextObject Name="Text12" Left="349.65" Top="172.09" Width="434.7" Height="15.12" BeforePrintEvent="Text12_BeforePrint" Text="[domicilio]" HorzAlign="Justify" Font="Arial, 8pt"/>
      <TextObject Name="Text13" Left="349.65" Top="187.21" Width="434.7" Height="15.12" BeforePrintEvent="Text13_BeforePrint" Text="[carrera]" HorzAlign="Justify" Font="Arial, 8pt"/>
      <TextObject Name="Text9" Left="207.9" Top="202.33" Width="141.75" Height="15.12" Text="Matricula" VertAlign="Bottom" Font="Arial, 8pt, style=Bold"/>
      <TextObject Name="Text14" Left="349.65" Top="202.33" Width="434.7" Height="15.12" BeforePrintEvent="Text14_BeforePrint" Text="[matricula]" HorzAlign="Justify" VertAlign="Bottom" Font="Arial, 8pt"/>
      <TextObject Name="Text8" Left="207.9" Top="187.21" Width="141.75" Height="15.12" BeforePrintEvent="Text8_BeforePrint" Text="[carrera_pos]:" Font="Arial, 8pt, style=Bold"/>
      <PictureObject Name="Picture1" Width="198.45" Height="122.85" DataColumn="LogoCampus.Logo"/>
      <GroupHeaderBand Name="GroupHeader3" Top="231.45" Width="785.86" Height="30.24" Condition="[CardexGrupo.ID_Alumno2]">
        <TextObject Name="Text15" Top="5.67" Width="56.7" Height="24.57" Text="Clave" Padding="0, 0, 0, 0" HorzAlign="Center" VertAlign="Center" Font="Arial, 8pt, style=Bold"/>
        <TextObject Name="Text16" Left="56.7" Top="5.67" Width="198.45" Height="24.57" Text="Materia" Padding="0, 0, 0, 0" HorzAlign="Center" VertAlign="Center" Font="Arial, 8pt, style=Bold"/>
        <TextObject Name="Text17" Left="255.15" Top="5.67" Width="47.25" Height="24.57" BeforePrintEvent="Text17_BeforePrint" Text="Créd." Padding="0, 0, 0, 0" AutoShrink="FontSize" HorzAlign="Center" VertAlign="Center" Font="Arial, 8pt, style=Bold"/>
        <TextObject Name="Text19" Left="302.4" Top="15.12" Width="47.25" Height="15.12" Text="Número" Padding="0, 0, 0, 0" HorzAlign="Center" VertAlign="Center" Font="Arial, 8pt, style=Bold"/>
        <TextObject Name="Text20" Left="349.65" Top="15.12" Width="85.05" Height="15.12" Text="Letra" Padding="0, 0, 0, 0" HorzAlign="Center" VertAlign="Center" Font="Arial, 8pt, style=Bold"/>
        <TextObject Name="Text21" Left="434.7" Top="5.67" Width="66.15" Height="24.57" Text="Fecha" Padding="0, 0, 0, 0" HorzAlign="Center" VertAlign="Center" Font="Arial, 8pt, style=Bold"/>
        <TextObject Name="Text22" Left="500.85" Top="5.67" Width="103.95" Height="24.57" Text="Folio" Padding="0, 0, 0, 0" HorzAlign="Center" VertAlign="Center" Font="Arial, 8pt, style=Bold"/>
        <TextObject Name="Text24" Left="604.8" Top="5.67" Width="122.85" Height="24.57" Text="Ciclo" Padding="0, 0, 0, 0" HorzAlign="Center" VertAlign="Center" Font="Arial, 8pt, style=Bold"/>
        <TextObject Name="Text25" Left="727.65" Top="5.67" Width="56.7" Height="24.57" Text="Tipo Examen" Padding="0, 0, 0, 0" HorzAlign="Center" VertAlign="Center" Font="Arial, 8pt, style=Bold"/>
        <TextObject Name="Text18" Left="302.4" Top="3" Width="132.3" Height="18.9" Text="Calificación" Padding="0, 0, 0, 0" HorzAlign="Center" VertAlign="Center" Font="Arial, 8pt, style=Bold"/>
        <GroupHeaderBand Name="GroupHeader2" Top="263.96" Width="785.86" Height="15.12" Condition="[CardexGrupo.NoSemestre]" KeepTogether="true">
          <TextObject Name="Text28" Left="56.7" Width="198.45" Height="15.12" BeforePrintEvent="Text28_BeforePrint" Text="[semestre] [medida]" VertAlign="Center" Font="Arial, 7pt, style=Bold"/>
          <DataBand Name="Data1" Top="281.35" Width="785.86" Height="11.34" BeforePrintEvent="Data1_BeforePrint" DataSource="Table" KeepTogether="true">
            <TextObject Name="Text26" Width="56.7" Height="11.34" Text="[CardexGrupo.Clave]" VertAlign="Center" Font="Arial, 7pt"/>
            <TextObject Name="Text27" Left="56.7" Width="198.45" Height="11.34" CanBreak="false" Text="[CardexGrupo.DescripcionMateria]" AutoShrink="FontWidth" VertAlign="Center" Font="Arial, 7pt"/>
            <TextObject Name="Text32" Left="255.15" Width="47.25" Height="11.34" BeforePrintEvent="Text32_BeforePrint" Text="[creditos]" HorzAlign="Center" VertAlign="Center" Font="Arial, 7pt"/>
            <TextObject Name="Text33" Left="302.4" Width="47.25" Height="11.34" BeforePrintEvent="Text33_BeforePrint" Text="[calificacionMateria]" HorzAlign="Center" VertAlign="Center" Font="Arial, 7pt"/>
            <TextObject Name="Text34" Left="349.65" Width="85.05" Height="11.34" BeforePrintEvent="Text34_BeforePrint" Text="[calificacionLetra]" VertAlign="Center" Font="Arial, 7pt"/>
            <TextObject Name="Text36" Left="500.85" Width="103.95" Height="11.34" BeforePrintEvent="Text36_BeforePrint" Text="[folio]" HorzAlign="Center" VertAlign="Center" Font="Arial, 7pt"/>
            <TextObject Name="Text38" Left="434.7" Width="66.15" Height="11.34" BeforePrintEvent="Text38_BeforePrint" Text="[fechaExamen]" HorzAlign="Center" VertAlign="Center" Font="Arial, 7pt">
              <Highlight>
                <Condition Expression="Value == &quot;01-I-1&quot;" TextFill.Color="Transparent"/>
              </Highlight>
            </TextObject>
            <TextObject Name="Text39" Left="727.65" Width="56.7" Height="11.34" BeforePrintEvent="Text39_BeforePrint" Text="[tipoExamen]" HorzAlign="Center" VertAlign="Center" Font="Arial, 7pt"/>
            <TextObject Name="Text35" Left="604.8" Width="122.85" Height="11.34" BeforePrintEvent="Text35_BeforePrint" Text="[ciclo]" AutoShrink="FontSize" HorzAlign="Center" VertAlign="Center" Font="Arial, 7pt"/>
            <TextObject Name="Text23" Left="784.35" Width="94.5" Height="11.34" Visible="false" BeforePrintEvent="Text23_BeforePrint" Text="[i]"/>
            <Sort>
              <Sort Expression="[CardexGrupo.Orden]"/>
            </Sort>
          </DataBand>
          <GroupFooterBand Name="GroupFooter2" Top="294.96" Width="785.86"/>
        </GroupHeaderBand>
        <GroupFooterBand Name="GroupFooter3" Top="297.24" Width="785.86"/>
      </GroupHeaderBand>
      <GroupFooterBand Name="GroupFooter1" Top="299.51" Width="785.86" Height="119.07">
        <TextObject Name="Text29" Width="784.35" Height="28.35" BeforePrintEvent="Text29_BeforePrint" Text="Este cardex ampara &lt;b&gt;[Materias]&lt;/b&gt; asignaturas con promedio general de &lt;b&gt;[promedioFinal]&lt;/b&gt; y &lt;b&gt;[Creditos]&lt;/b&gt; créditos cubiertos, tomando en cuenta solo calificaciones acreditadas." HorzAlign="Center" VertAlign="Center" Font="Arial, 8pt" HtmlTags="true"/>
        <TextObject Name="Text30" Left="255.15" Top="85.05" Width="349.65" Height="18.9" Border.Lines="Top" Border.Width="0.5" BeforePrintEvent="Text30_BeforePrint" Text="[responsable]" AutoShrink="FontSize" HorzAlign="Center" VertAlign="Bottom"/>
        <TextObject Name="Text31" Left="255.15" Top="100.17" Width="349.65" Height="18.9" BeforePrintEvent="Text31_BeforePrint" Text="[puesto]" AutoShrink="FontSize" HorzAlign="Center" VertAlign="Bottom"/>
        <TextObject Name="Text40" Top="28.35" Width="784.35" Height="18.9" Text="Se expide la presente para fines de índole informativo que [interesado_a] convengan." HorzAlign="Center" VertAlign="Center" Font="Arial, 8pt"/>
      </GroupFooterBand>
    </GroupHeaderBand>
    <PageFooterBand Name="PageFooter1" Top="420.85" Width="785.86"/>
  </ReportPage>
</Report>
